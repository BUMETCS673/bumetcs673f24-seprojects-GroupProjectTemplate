package edu.bu.cs673.secondhand.model;

import java.io.Serializable;
import java.util.Date;

/**
 * Represents a user in the second-hand trading system.
 * This class encapsulates all relevant information about a user.
 *
 * Author: YQ
 */
public class UserModel implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the user.
     * This is typically auto-generated by the database.
     */
    private Long id;

    /**
     * User's email address.
     * This serves as the primary means of identification and communication.
     */
    private String email;

    /**
     * User's login password.
     * This should be stored in an encrypted format for security reasons.
     */
    private String userPassword;

    /**
     * User's chosen nickname or display name.
     * This may be used for personalization and display purposes.
     */
    private String nickname;

    /**
     * URL or path to the user's avatar image.
     * This is used for visual representation of the user in the system.
     */
    private String avatar;

    /**
     * Date and time when the user registered.
     * This helps track user longevity and may be used for analytics.
     */
    private Date signInTime;

    /**
     * User's status in the system.
     * This can represent various states like active, inactive, suspended, etc.
     */
    private Byte userStatus;

    /**
     * Indicates whether the user's account is active.
     * This is used for account management and access control.
     */
    private boolean isActive;

    /**
     * Token used for account activation.
     * This is typically sent via email for user verification.
     */
    private String activationToken;

    /**
     * Date and time when the user record was created.
     * This is used for auditing and tracking purposes.
     */
    private Date createdAt;

    /**
     * Date and time when the user record was last updated.
     * This helps in tracking the most recent changes to the user's information.
     */
    private Date updatedAt;

    /**
     * Unique account number assigned to the user.
     * This can be used for internal identification or reference purposes.
     */
    private String accountNumber;

    /**
     * Expiration date and time for the activation token.
     * This is used to ensure that activation links are only valid for a limited time.
     */
    private Date tokenExpiry;

    // Getter and Setter methods for all fields

    /**
     * Gets the user's unique identifier.
     * @return The user's ID.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the user's unique identifier.
     * @param id The user's ID to set.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the user's email address.
     * @return The user's email address.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the user's email address.
     * @param email The email address to set.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the user's password (encrypted).
     * @return The user's encrypted password.
     */
    public String getUserPassword() {
        return userPassword;
    }

    /**
     * Sets the user's password (should be encrypted before setting).
     * @param userPassword The encrypted password to set.
     */
    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    /**
     * Gets the user's nickname.
     * @return The user's nickname.
     */
    public String getNickname() {
        return nickname;
    }

    /**
     * Sets the user's nickname.
     * @param nickname The nickname to set.
     */
    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    /**
     * Gets the URL or path of the user's avatar.
     * @return The avatar URL or path.
     */
    public String getAvatar() {
        return avatar;
    }

    /**
     * Sets the URL or path of the user's avatar.
     * @param avatar The avatar URL or path to set.
     */
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /**
     * Gets the user's registration date and time.
     * @return The sign-in time.
     */
    public Date getSignInTime() {
        return signInTime;
    }

    /**
     * Sets the user's registration date and time.
     * @param signInTime The sign-in time to set.
     */
    public void setSignInTime(Date signInTime) {
        this.signInTime = signInTime;
    }

    /**
     * Gets the user's status.
     * @return The user's status.
     */
    public Byte getUserStatus() {
        return userStatus;
    }

    /**
     * Sets the user's status.
     * @param userStatus The status to set.
     */
    public void setUserStatus(Byte userStatus) {
        this.userStatus = userStatus;
    }

    /**
     * Checks if the user's account is active.
     * @return true if the account is active, false otherwise.
     */
    public boolean isActive() {
        return isActive;
    }

    /**
     * Sets the active status of the user's account.
     * @param active The active status to set.
     */
    public void setActive(boolean active) {
        isActive = active;
    }

    /**
     * Gets the user's activation token.
     * @return The activation token.
     */
    public String getActivationToken() {
        return activationToken;
    }

    /**
     * Sets the user's activation token.
     * @param activationToken The activation token to set.
     */
    public void setActivationToken(String activationToken) {
        this.activationToken = activationToken;
    }

    /**
     * Gets the creation date of the user record.
     * @return The creation date.
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the creation date of the user record.
     * @param createdAt The creation date to set.
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the last update date of the user record.
     * @return The last update date.
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Sets the last update date of the user record.
     * @param updatedAt The last update date to set.
     */
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Gets the user's account number.
     * @return The account number.
     */
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Sets the user's account number.
     * @param accountNumber The account number to set.
     */
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Gets the expiration date of the activation token.
     * @return The token expiry date.
     */
    public Date getTokenExpiry() {
        return tokenExpiry;
    }

    /**
     * Sets the expiration date of the activation token.
     * @param tokenExpiry The token expiry date to set.
     */
    public void setTokenExpiry(Date tokenExpiry) {
        this.tokenExpiry = tokenExpiry;
    }
}
pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_DEV = 'docker-compose.dev.yml'
        DOCKER_COMPOSE_PROD = 'docker-compose.prod.yml'
        WORKSPACE="${WORKSPACE}/code"
    }

    stages {
        stage('Build Backend') {
            steps {
                script {
                    // Build the backend container (Flask)
                    sh '''
                    cd server
                    docker build -t menumatch-backend .
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    // Build the frontend container (React)
                    sh '''
                    cd menumatch
                    docker build -t menumatch-frontend .
                    '''
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        // Run tests for backend (if any)
                        sh '''
                        cd server
                        echo "Backend Tests to be run here"
                        '''
                    }
                }

                stage('Frontend Tests') {
                    steps {
                        // Run tests for frontend (if any)
                        sh '''
                        cd menumatch
                        echo "Frontend Tests to be run here
                        '''
                    }
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    // Deploy the app to development environment
                    sh '''
                    docker-compose -f $DOCKER_COMPOSE_DEV up -d
                    '''
                }
            }
        }

        stage('Build and Deploy to Production') {
            agent { 
                label 'my-defined-label'
            }
            when {
                branch 'main'
            }
            steps {
                script {
                    // Build and deploy for production
                    sh '''
                    docker-compose -f $DOCKER_COMPOSE_PROD up -d --build
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker containers and networks
            sh 'docker-compose down'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

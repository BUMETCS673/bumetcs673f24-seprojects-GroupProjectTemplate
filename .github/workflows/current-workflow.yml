name: Initial Services Workflow
run-name: ${{ github.actor }} is testing microservices workflow.
on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE_NAME: flask_backend_container
  REPO_NAME: "bumetcs673/seprojects-cs673olf24team6"

jobs:
  Docker-and-Python-Flask-Service:
    runs-on: ubuntu-latest

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."
      
      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt
        
      - name: Build the Docker Image
        working-directory: ./code/backend
        run: docker build -t flask_backend .
      - name: Start a new container
        run: docker run -p 5000:5000 --name flask_backend_container -d -t flask_backend
      - name: List containers
        run: docker ps -a
      - name: Inspect flask_backend_container
        run: docker inspect flask_backend_container
      - name: Stop container
        run: docker stop flask_backend_container
      - name: Restart container
        run: docker restart flask_backend_container
      - name: Show container status
        run: docker ps -a
      - name: Stop container again
        run: docker stop flask_backend_container
      - name: Remove container
        run: docker rm flask_backend_container
        
      - run: echo "Docker-and-Python-Flask-Service job's status is ${{ job.status }}."

  Publish-Flask-Image-to-GitHub-Package-Registry:
    name: Publish Docker Python Flask Image to GitHub Package Registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt
      
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend
          push: true
          tags: ghcr.io/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
        
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - run: echo "Publish-Flask-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."
  
  Node-Service:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Checking out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
      - name: Running Docker-and-Node-Service with npm
        run: |
          cd ./code/frontend
          npm start & npx wait-on http://localhost:3000
      
      - run: echo "Node-Service job's status is ${{ job.status }}."

  Docker-and-Node-Service:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Checking out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
        
      - name: Build the Docker Image
        working-directory: ./code/frontend
        run: docker build -t front_end .
      - name: Start a new container
        run: docker run -p 3000:3000 --name frontend_container -d -t front_end
      - name: List containers
        run: docker ps -a
      - name: Inspect frontend_container
        run: docker inspect frontend_container
      - name: Stop container
        run: docker stop frontend_container
      - name: Restart container
        run: docker restart frontend_container
      - name: Show container status
        run: docker ps -a
      - name: Stop container again
        run: docker stop frontend_container
      - name: Remove container
        run: docker rm frontend_container
      
      - run: echo "Docker-and-Node-Service job's status is ${{ job.status }}."

  Publish-Node-Image-to-GitHub-Package-Registry:
    name: Publish Docker Node Image to GitHub Package Registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
        
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}_frontend_${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
        
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - run: echo "Publish-Node-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."

name: Microservices Workflow
run-name: ${{ github.actor }} is testing microservices workflow.
on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE_NAME: flask_backend
  FRONTEND_IMAGE_NAME: node_frontend
  DATABASE_IMAGE_NAME: sqlite_database
  REPO_NAME: "bumetcs673/seprojects-cs673olf24team6"

jobs:
  get-branch-name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_branch_name: ${{ steps.sanitize.outputs.sanitized }}
    steps:
      - name: Sanitize branch name
        id: sanitize
        run: |
          sanitized=$(echo '${{ github.ref_name }}' | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "sanitized=$sanitized" >> $GITHUB_OUTPUT  # Save it as job output

  Docker-and-Python-Flask-Service:
    runs-on: ubuntu-latest
    needs: get-branch-name
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."
      
      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt
        
      - name: Build the Docker Image
        run: |
          cd ./code/backend
          docker build -t ${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }} .

      - name: Start a new container
        run: docker run -p 5000:5000 --name ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }} -d ${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Check files in container
        run: |
            docker exec ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }} ls /app

      - name: List containers
        run: docker ps -a

      - name: Inspect ${{ env.BACKEND_IMAGE_NAME }}
        run: docker inspect ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Stop container
        run: docker stop ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Restart container
        run: docker restart ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Show container status
        run: docker ps -a

      - name: Stop container again
        run: docker stop ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Remove container
        run: docker rm ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
        
      - run: echo "Docker-and-Python-Flask-Service job's status is ${{ job.status }}."


  Docker-and-Database-Service:
    runs-on: ubuntu-latest
    needs: get-branch-name
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install required dependencies
        run: |
          cd ./code/database
          pip install -r requirements.txt

      - name: Build the Docker Image
        run: |
          cd ./code/database
          docker build -t ${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }} .

      - name: Start a new container
        run: docker run --name ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }} -d ${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Check files in container
        run: |
          docker exec ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }} ls /app

      - name: List containers
        run: docker ps -a

      - name: Inspect ${{ env.DATABASE_IMAGE_NAME }}
        run: docker inspect ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Stop container
        run: docker stop ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Restart container
        run: docker restart ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Show container status
        run: docker ps -a

      - name: Stop container again
        run: docker stop ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Remove container
        run: docker rm ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Docker-and-Sqlite-database-Service job's status is ${{ job.status }}."

  Push-Flask-Image-to-GitHub-Package-Registry:
    name: Push Docker Python Flask Image to GitHub Package Registry
    needs: [ get-branch-name,Docker-and-Python-Flask-Service ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt
      
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Push-Flask-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."


  Push-Database-Image-to-GitHub-Package-Registry:
    name: Push Docker Sqlite Database Image to GitHub Package Registry
    needs: [ get-branch-name, Docker-and-Database-Service ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: |
          cd ./code/database
          pip install -r requirements.txt

      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker Image (Initial Build)
        run: |
          echo "Building the Docker image"
          docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}_temp ./code/database
          
      - name: Run container to verify and commit with generated files
        run: |
          echo "Running container for verification"
          docker run -d --name sqlite-database ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}_temp
          docker ps

          # Commit the container after the file is generated to preserve changes
          echo "Committing the running container to include generated files"
          docker commit sqlite-database ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

          # Stop and remove the container
          docker stop sqlite-database
          docker rm sqlite-database

      - name: Push the committed image with generated files
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/database
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Push-Database-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."



  Run-Backend-Unit-Tests:
    name: Running backend unit tests
    needs: [get-branch-name, Docker-and-Python-Flask-Service, Push-Flask-Image-to-GitHub-Package-Registry ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/flask_backend:${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - name: Run Unit Tests
        working-directory: /app/tests
        run: pytest process_query_request_test.py


  Run-Database-Unit-Tests:
    name: Running database unit tests
    needs: [ get-branch-name, Docker-and-Database-Service, Push-Database-Image-to-GitHub-Package-Registry ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/sqlite_database:${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - run: echo "temp change permission"
      - run: ls /app
      - run: pwd
      - run: ls /app/src
      # run: chmod 755 $GITHUB_WORKSPACE/app/src/movies.db

      - name: Run test
        working-directory: /app/tests
        run: pytest movies_unit_test.py


  Publish-Flask-Image-to-GitHub-Package-Registry:
    name: Publish Docker Python Flask Image to GitHub Package Registry
    needs: [get-branch-name, Docker-and-Python-Flask-Service, Run-Backend-Unit-Tests ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt
      
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Publish-Flask-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."

  Docker-and-Node-Service:
    runs-on: ubuntu-latest
    needs: get-branch-name
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Checking out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
        
      - name: Build the Docker Image
        working-directory: ./code/frontend
        run: docker build -t ${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }} .
      - name: Start a new container
        run: docker run -p 3000:3000 --name ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }} -d ${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      - name: List containers
        run: docker ps -a
      - name: Inspect ${{ env.FRONTEND_IMAGE_NAME }}
        run: docker inspect ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      - name: Stop container
        run: docker stop ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      - name: Restart container
        run: docker restart ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      - name: Show container status
        run: docker ps -a
      - name: Stop container again
        run: docker stop ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      - name: Remove container
        run: docker rm ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      
      - run: echo "Docker-and-Node-Service job's status is ${{ job.status }}."

  Push-Node-Image-to-GitHub-Package-Registry:
    name: Push Docker Node Image to GitHub Package Registry
    needs: [get-branch-name, Docker-and-Node-Service]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
        
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Push-Node-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."


  Run-Frontend-Unit-Tests:
    name: Running frontend unit tests
    needs: [get-branch-name, Push-Node-Image-to-GitHub-Package-Registry]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/node_frontend:${{ needs.get-branch-name.outputs.sanitized_branch_name }}
      credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:        
      - name: Run Unit Tests
        working-directory: /src/src/tests
        run: npm test submitform.test.js

  Publish-Node-Image-to-GitHub-Package-Registry:
    name: Publish Docker Node Image to GitHub Package Registry
    needs: [get-branch-name, Run-Frontend-Unit-Tests]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "Job is running on a ${{ runner.os }} server hosted by GitHub"
      - run: echo "Branch name is ${{ github.ref }} and repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "The repository ${{ github.repository }} has been cloned to runner."
      - run: echo "Workflow is now ready to test code on runner."

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save
        
      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.get-branch-name.outputs.sanitized_branch_name }}

      - run: echo "Publish-Node-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."
